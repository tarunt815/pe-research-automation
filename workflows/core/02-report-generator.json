{
  "name": "Research Report - [TOPIC NAME]",
  "nodes": [
    {
      "parameters": {
        "content": "## ðŸŽ¯ Workflow Configuration\n\n**To customize this workflow:**\n1. Edit the Configuration node below\n2. Update the report name, topic, and keywords\n3. Set email senders to monitor (or leave empty for all)\n4. Define report sections\n5. Schedule weekly execution\n\n**This workflow will:**\n- Scan emails for your topic\n- Extract insights using AI\n- Generate weekly reports\n- Email PDF summaries",
        "height": 250,
        "width": 400
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Instructions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "weekInterval": 1,
              "triggerAtDay": [1],
              "triggerAtHour": 8,
              "triggerAtMinute": 0
            }
          ]
        }
      },
      "id": "b2c3d4e5-f678-9012-bcde-f23456789012",
      "name": "Weekly Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [400, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "report_name",
              "value": "AI & Technology Research"
            },
            {
              "name": "topic",
              "value": "Artificial Intelligence"
            },
            {
              "name": "keywords",
              "value": "AI,machine learning,LLM,generative AI,OpenAI,Anthropic,Claude,GPT,funding,acquisition,startup"
            },
            {
              "name": "email_senders",
              "value": "newsletter@openai.com,updates@anthropic.com,digest@techcrunch.com"
            },
            {
              "name": "report_recipients",
              "value": "team@company.com,research@company.com"
            }
          ],
          "number": [
            {
              "name": "days_to_scan",
              "value": 7
            }
          ]
        },
        "options": {}
      },
      "id": "c3d4e5f6-7890-1234-cdef-345678901234",
      "name": "ðŸ“‹ Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get or create report config\nINSERT INTO report_configs (report_name, topic, keywords)\nVALUES (\n  '{{ $json.report_name }}',\n  '{{ $json.topic }}',\n  ARRAY[{{ $json.keywords.split(',').map(k => `'${k.trim()}'`).join(',') }}]\n)\nON CONFLICT (report_name) DO UPDATE\nSET \n  topic = EXCLUDED.topic,\n  keywords = EXCLUDED.keywords,\n  is_active = true\nRETURNING id, report_name;",
        "options": {}
      },
      "id": "d4e5f678-9012-3456-def0-456789012345",
      "name": "Setup Report Config",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.2,
      "position": [800, 400],
      "credentials": {
        "postgres": {
          "id": "{{postgresCredentialId}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "receivedAfter": "={{ $now.minus($('ðŸ“‹ Configuration').item.json.days_to_scan, 'days').toISO() }}"
        },
        "options": {
          "attachments": false
        }
      },
      "id": "e5f67890-1234-5678-ef01-567890123456",
      "name": "Get Recent Emails",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1000, 400],
      "credentials": {
        "gmailOAuth2": {
          "id": "{{gmailCredentialId}}",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter emails based on configuration\nconst config = $('ðŸ“‹ Configuration').item.json;\nconst reportId = $('Setup Report Config').item.json.id;\nconst keywords = config.keywords.toLowerCase().split(',').map(k => k.trim());\nconst senders = config.email_senders ? config.email_senders.split(',').map(s => s.trim()) : [];\n\nconst email = $json;\nconst from = email.from?.value?.[0]?.address || '';\nconst subject = (email.subject || '').toLowerCase();\nconst body = (email.textPlain || email.snippet || '').toLowerCase();\nconst content = subject + ' ' + body;\n\n// Check if email matches criteria\nlet matches = false;\n\n// Check sender if specified\nif (senders.length > 0) {\n  matches = senders.some(sender => from.includes(sender));\n} else {\n  // If no specific senders, check keywords\n  matches = keywords.some(keyword => content.includes(keyword));\n}\n\nif (matches) {\n  return {\n    json: {\n      report_config_id: reportId,\n      email_id: email.id,\n      subject: email.subject,\n      from: from,\n      from_name: email.from?.value?.[0]?.name || '',\n      date: email.date,\n      body: (email.textPlain || email.snippet || '').substring(0, 5000),\n      thread_id: email.threadId\n    }\n  };\n}\n\n// Return null to filter out\nreturn null;"
      },
      "id": "f6789012-3456-7890-f012-678901234567",
      "name": "Filter Relevant Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "abc12345-6789-0123-4567-890123456789",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "07890123-4567-8901-0123-789012345678",
      "name": "Has Content?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1400, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Check if already processed\nSELECT id FROM processed_content \nWHERE report_config_id = {{ $json.report_config_id }}\nAND source_id = '{{ $json.email_id }}';",
        "options": {}
      },
      "id": "18901234-5678-9012-1234-890123456789",
      "name": "Check If Processed",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.2,
      "position": [1600, 320],
      "credentials": {
        "postgres": {
          "id": "{{postgresCredentialId}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "bcd23456-7890-1234-5678-901234567890",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "29012345-6789-0123-2345-901234567890",
      "name": "New Email?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1800, 320]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo-preview",
          "mode": "list",
          "cachedResultName": "gpt-4-turbo-preview"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert research analyst specializing in {{ $('ðŸ“‹ Configuration').item.json.topic }}. Extract key information and insights from emails.",
              "role": "system"
            },
            {
              "content": "Analyze this email for {{ $('ðŸ“‹ Configuration').item.json.topic }} insights:\n\nFrom: {{ $('Filter Relevant Emails').item.json.from_name }} ({{ $('Filter Relevant Emails').item.json.from }})\nSubject: {{ $('Filter Relevant Emails').item.json.subject }}\nDate: {{ $('Filter Relevant Emails').item.json.date }}\n\nBody:\n{{ $('Filter Relevant Emails').item.json.body }}\n\nExtract the following in JSON format:\n1. insights - Array of {type, title, summary, importance} where type can be: funding, acquisition, product_launch, partnership, regulation, market_trend, technology, or other\n2. companies - Array of mentioned companies with context\n3. people - Array of mentioned people with roles\n4. key_metrics - Any numbers, statistics, or metrics\n5. tags - Relevant tags for this content\n6. summary - 2-3 sentence summary\n7. importance_score - 1-10 based on relevance to {{ $('ðŸ“‹ Configuration').item.json.topic }}",
              "role": "user"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "responseFormat": {
            "values": {
              "type": "json_object"
            }
          }
        }
      },
      "id": "3a123456-7890-1234-3456-012345678901",
      "name": "Extract with AI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [2000, 240],
      "credentials": {
        "openAiApi": {
          "id": "{{openAiCredentialId}}",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Store processed content\nINSERT INTO processed_content (\n  report_config_id,\n  source_type,\n  source_id,\n  source_date,\n  source_metadata,\n  extracted_data\n) VALUES (\n  {{ $('Filter Relevant Emails').item.json.report_config_id }},\n  'email',\n  '{{ $('Filter Relevant Emails').item.json.email_id }}',\n  '{{ $('Filter Relevant Emails').item.json.date }}',\n  '{{ JSON.stringify({\n    from: $('Filter Relevant Emails').item.json.from,\n    from_name: $('Filter Relevant Emails').item.json.from_name,\n    subject: $('Filter Relevant Emails').item.json.subject\n  }) }}'::jsonb,\n  '{{ $json.response.text }}'::jsonb\n)\nRETURNING id;",
        "options": {}
      },
      "id": "4b234567-8901-2345-4567-123456789012",
      "name": "Store Content",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.2,
      "position": [2200, 240],
      "credentials": {
        "postgres": {
          "id": "{{postgresCredentialId}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and create insights\nconst contentId = $json.id;\nconst reportConfigId = $('Filter Relevant Emails').item.json.report_config_id;\nconst extracted = JSON.parse($('Extract with AI').item.json.response.text);\n\nconst insights = [];\n\n// Convert extracted insights\nif (extracted.insights && Array.isArray(extracted.insights)) {\n  extracted.insights.forEach(insight => {\n    insights.push({\n      report_config_id: reportConfigId,\n      content_id: contentId,\n      insight_type: insight.type || 'general',\n      title: insight.title,\n      summary: insight.summary,\n      importance_score: (insight.importance || 5) / 10,\n      tags: extracted.tags || [],\n      detailed_data: {\n        companies: extracted.companies || [],\n        people: extracted.people || [],\n        metrics: extracted.key_metrics || {}\n      }\n    });\n  });\n}\n\n// If no specific insights, create one from summary\nif (insights.length === 0 && extracted.summary) {\n  insights.push({\n    report_config_id: reportConfigId,\n    content_id: contentId,\n    insight_type: 'summary',\n    title: $('Filter Relevant Emails').item.json.subject,\n    summary: extracted.summary,\n    importance_score: (extracted.importance_score || 5) / 10,\n    tags: extracted.tags || []\n  });\n}\n\nreturn insights.map(insight => ({ json: insight }));"
      },
      "id": "5c345678-9012-3456-5678-234567890123",
      "name": "Create Insights",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2400, 240]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO insights (\n  report_config_id,\n  content_id,\n  insight_type,\n  title,\n  summary,\n  importance_score,\n  tags,\n  detailed_data\n) VALUES (\n  {{ $json.report_config_id }},\n  {{ $json.content_id }},\n  '{{ $json.insight_type }}',\n  '{{ $json.title.replace(/'/g, \"''\") }}',\n  '{{ $json.summary.replace(/'/g, \"''\") }}',\n  {{ $json.importance_score }},\n  ARRAY[{{ ($json.tags || []).map(t => `'${t}'`).join(',') }}],\n  '{{ JSON.stringify($json.detailed_data || {}) }}'::jsonb\n);",
        "options": {}
      },
      "id": "6d456789-0123-4567-6789-345678901234",
      "name": "Store Insights",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.2,
      "position": [2600, 240],
      "credentials": {
        "postgres": {
          "id": "{{postgresCredentialId}}",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "7e567890-1234-5678-7890-456789012345",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2400, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "def34567-8901-2345-6789-567890123456",
              "leftValue": "={{ $runIndex }}",
              "rightValue": "={{ $node['Get Recent Emails'].outputsData.main[0].length - 1 }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8f678901-2345-6789-8901-567890123456",
      "name": "All Emails Done?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2600, 400]
    },
    {
      "parameters": {
        "resource": "report",
        "operation": "generate",
        "reportConfigId": "={{ $('Setup Report Config').item.json.id }}",
        "weekStart": "={{ $now.startOf('week').minus(1, 'week').toISO() }}",
        "weekEnd": "={{ $now.startOf('week').minus(1, 'second').toISO() }}"
      },
      "id": "90789012-3456-7890-9012-678901234567",
      "name": "Generate Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2800, 480],
      "code": "// This is a placeholder - in real implementation, this would be a separate workflow\n// For now, we'll generate the report inline\n\nconst reportConfigId = $('Setup Report Config').item.json.id;\nconst reportName = $('Setup Report Config').item.json.report_name;\nconst recipients = $('ðŸ“‹ Configuration').item.json.report_recipients;\n\nreturn {\n  json: {\n    reportConfigId,\n    reportName,\n    recipients,\n    weekStart: $now.startOf('week').minus(1, 'week').toISO(),\n    weekEnd: $now.startOf('week').minus(1, 'second').toISO()\n  }\n};"
    }
  ],
  "connections": {
    "Weekly Schedule": {
      "main": [[{ "node": "ðŸ“‹ Configuration", "type": "main", "index": 0 }]]
    },
    "ðŸ“‹ Configuration": {
      "main": [[{ "node": "Setup Report Config", "type": "main", "index": 0 }]]
    },
    "Setup Report Config": {
      "main": [[{ "node": "Get Recent Emails", "type": "main", "index": 0 }]]
    },
    "Get Recent Emails": {
      "main": [[{ "node": "Filter Relevant Emails", "type": "main", "index": 0 }]]
    },
    "Filter Relevant Emails": {
      "main": [[{ "node": "Has Content?", "type": "main", "index": 0 }]]
    },
    "Has Content?": {
      "main": [
        [{ "node": "Check If Processed", "type": "main", "index": 0 }],
        [{ "node": "Merge", "type": "main", "index": 1 }]
      ]
    },
    "Check If Processed": {
      "main": [[{ "node": "New Email?", "type": "main", "index": 0 }]]
    },
    "New Email?": {
      "main": [
        [{ "node": "Extract with AI", "type": "main", "index": 0 }],
        [{ "node": "Merge", "type": "main", "index": 1 }]
      ]
    },
    "Extract with AI": {
      "main": [[{ "node": "Store Content", "type": "main", "index": 0 }]]
    },
    "Store Content": {
      "main": [[{ "node": "Create Insights", "type": "main", "index": 0 }]]
    },
    "Create Insights": {
      "main": [[{ "node": "Store Insights", "type": "main", "index": 0 }]]
    },
    "Store Insights": {
      "main": [[{ "node": "Merge", "type": "main", "index": 0 }]]
    },
    "Merge": {
      "main": [[{ "node": "All Emails Done?", "type": "main", "index": 0 }]]
    },
    "All Emails Done?": {
      "main": [
        [{ "node": "Generate Report", "type": "main", "index": 0 }],
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "flexible-v1",
  "id": "FlexibleMaster001",
  "tags": ["research", "template"]
}